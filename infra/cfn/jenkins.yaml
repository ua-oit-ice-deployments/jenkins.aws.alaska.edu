AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Template for deployment of the Jenkins Master.

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Id of the VPC into which to deploy the Jenkins Master

  PublicSubnetIds:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: The subnet into which to deploy the Load Balancer

  PrivateSubnetIds:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: The subnet into which to deploy the Jenkins Master

  DnsZoneId:
    Type: String
    Description: Id of the Route 53 hosted zone.

  DnsZoneName:
    Type: String
    Description: >-
      Name of the Route 53 hosted zone (Do not apend a dot at the end.)

  DnsRecordName:
    Type: String
    Description: Record name (without domain) for the Jenkins master service.

  CertificateSanName:
    Type: String
    Description: >-
      Record name (without domain) for an alias in the same hosted zone
      that may be used to address the Jenkins master service.
    Default: jenkins

  ClientCidrList:
    Type: List<String>
    Description: Addresses ranges for clients in CIDR notation.

Conditions:
  Have2PrivateSubnets:
    !Not [!Equals ["", !Select [1, !Split [",", !Join ["", [!Join [",", !Ref PrivateSubnetIds], ",,,"]]]]]]
  Have3PrivateSubnets:
    !Not [!Equals ["", !Select [2, !Split [",", !Join ["", [!Join [",", !Ref PrivateSubnetIds], ",,,"]]]]]]
  Have4PrivateSubnets:
    !Not [!Equals ["", !Select [3, !Split [",", !Join ["", [!Join [",", !Ref PrivateSubnetIds], ",,,"]]]]]]

Resources:

  MasterSslCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub ${DnsRecordName}.${DnsZoneName}
      SubjectAlternativeNames:
        - !Sub ${CertificateSanName}.${DnsZoneName}
      DomainValidationOptions:
        - DomainName: !Sub ${DnsRecordName}.${DnsZoneName}
          HostedZoneId: !Ref DnsZoneId
        - DomainName: !Sub ${CertificateSanName}.${DnsZoneName}
          HostedZoneId: !Ref DnsZoneId
      ValidationMethod: DNS

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ELB to route traffic to Jenkins Master.
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Subnets: !Ref PublicSubnetIds
      SecurityGroups: [ !Ref AlbSecurityGroup ]

  MasterTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: HTTP
      Port: 8080
      HealthCheckPath: /login
      VpcId: !Ref VpcId
      TargetType: ip

  AlbHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: !Ref MasterSslCertificate
      DefaultActions:
      - Type: fixed-response
        FixedResponseConfig:
          StatusCode: 403
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 443
      Protocol: HTTPS

  AlbHttpsListenerAdminRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 10
      ListenerArn: !Ref AlbHttpsListener
      Actions:
      - Type: forward
        ForwardConfig:
          TargetGroups:
          - TargetGroupArn: !Ref MasterTargetGroup
      Conditions:
      - Field: source-ip
        SourceIpConfig:
          # Values: [ 137.229.6.64/26 ]
          Values: !Ref ClientCidrList

  # FIXME: Temporarily allow UA for troubleshooting.
  AlbHttpsListenerAdminRuleTMP:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 11
      ListenerArn: !Ref AlbHttpsListener
      Actions:
      - Type: forward
        ForwardConfig:
          TargetGroups:
          - TargetGroupArn: !Ref MasterTargetGroup
      Conditions:
      - Field: source-ip
        SourceIpConfig:
          Values: [ 137.229.0.0/16 ]

  AlbHttpsListenerWebhookRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 20
      ListenerArn: !Ref AlbHttpsListener
      Actions:
      - Type: forward
        ForwardConfig:
          TargetGroups:
          - TargetGroupArn: !Ref MasterTargetGroup
      Conditions:
      - Field: path-pattern
        PathPatternConfig:
          Values: [ /github-webhook/ ]

  MasterCname:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DnsZoneName}.
      Name: !Sub ${DnsRecordName}.${DnsZoneName}
      Comment: Jenkins Master
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !GetAtt AppLoadBalancer.DNSName

  MasterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-JenkinsMaster'
      RetentionInDays: 30

  MasterEcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'

  MasterEcsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Allow ECS to store logs in logwach.
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  EcsCluster:
    Type: AWS::ECS::Cluster

  MasterEcsTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ContainerDefinitions:
      - Name: chmod-jenkins-home
        Essential: false
        Image: public.ecr.aws/amazonlinux/amazonlinux:latest
        Command:
        - chown
        - 1000:1000
        - /var/jenkins_home
        MountPoints:
        - SourceVolume: jenkins-home
          ContainerPath: /var/jenkins_home
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref MasterLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: jenkins-permissions
      - Name: jenkins-master
        Image: jenkins/jenkins:lts-jdk11
        PortMappings:
        - ContainerPort: 8080
        DependsOn:
        - ContainerName: chmod-jenkins-home
          Condition: COMPLETE
        MountPoints:
        - SourceVolume: jenkins-home
          ContainerPath: /var/jenkins_home
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref MasterLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: jenkins-master
      ExecutionRoleArn: !Ref MasterEcsExecutionRole
      TaskRoleArn: !Ref MasterEcsTaskRole
      Volumes:
      - Name: jenkins-home
        EFSVolumeConfiguration:
          FilesystemId: !Ref HomeFileSystem
          TransitEncryption: ENABLED

  MasterEcsService:
    Type: AWS::ECS::Service
    DependsOn: AlbHttpsListenerAdminRule
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      TaskDefinition: !Ref MasterEcsTask
      HealthCheckGracePeriodSeconds: 300
      LaunchType: FARGATE
      EnableExecuteCommand: true
      LoadBalancers:
      - TargetGroupArn: !Ref MasterTargetGroup
        ContainerPort: 8080
        ContainerName: jenkins-master
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: [ !Ref MasterSecurityGroup ]
          Subnets: !Ref PrivateSubnetIds

  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow the ALB to route traffic to Jenkins.
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId: !Ref AlbSecurityGroup

  HomeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Jenkins Master to mount Jenkins Home
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      # Receive NFS from Jenkins Instances
      - IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        SourceSecurityGroupId: !Ref MasterSecurityGroup

  HomeFileSystem:
    Type: AWS::EFS::FileSystem
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-shared-filesystem

  HomeMountTarget0:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref HomeFileSystem
      SecurityGroups: [ !Ref HomeSecurityGroup ]
      SubnetId: !Select [ 0, !Ref PrivateSubnetIds ]

  HomeMountTarget1:
    Type: AWS::EFS::MountTarget
    Condition: Have2PrivateSubnets
    Properties:
      FileSystemId: !Ref HomeFileSystem
      SecurityGroups: [ !Ref HomeSecurityGroup ]
      SubnetId: !Select [ 1, !Ref PrivateSubnetIds ]

  HomeMountTarget2:
    Type: AWS::EFS::MountTarget
    Condition: Have3PrivateSubnets
    Properties:
      FileSystemId: !Ref HomeFileSystem
      SecurityGroups: [ !Ref HomeSecurityGroup ]
      SubnetId: !Select [ 2, !Ref PrivateSubnetIds ]

  HomeMountTarget3:
    Type: AWS::EFS::MountTarget
    Condition: Have4PrivateSubnets
    Properties:
      FileSystemId: !Ref HomeFileSystem
      SecurityGroups: [ !Ref HomeSecurityGroup ]
      SubnetId: !Select [ 3, !Ref PrivateSubnetIds ]
