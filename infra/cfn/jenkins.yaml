AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Template for deployment of the Jenkins Master.

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Id of the VPC into which to deploy the Jenkins Master

  PublicSubnetIds:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: The subnet into which to deploy the Load Balancer

  PrivateSubnetIds:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: The subnet into which to deploy the Jenkins Master

  DnsZoneId:
    Type: String
    Description: Id of the Route 53 hosted zone.

  DnsZoneName:
    Type: String
    Description: >-
      Name of the Route 53 hosted zone (Do not apend a dot at the end.)

  DnsRecordName:
    Type: String
    Description: Record name (without domain) for the Jenkins master service.

  CertificateSanName:
    Type: String
    Description: >-
      Record name (without domain) for an alias in the same hosted zone
      that may be used to address the Jenkins master service.
    Default: jenkins

  ClientCidrList:
    Type: List<String>
    Description: Addresses ranges for clients in CIDR notation.

  JenkinsPubKey:
    Type: String
    Description: Public key used by Jenkins to login to agent machine.

  ConfigUri:
    Type: String
    Description: URI containing `plugins` & `jenkins.casc.yaml` for Jenkins.
    Default: https://raw.githubusercontent.com/ua-oit-ice-deployments/jenkins.aws.alaska.edu/master/config

  SecretsJsonArn:
    Type: String
    Description: Name of JSON dictionary storing credentials in secrets manager.

Conditions:
  Have2PrivateSubnets:
    !Not [!Equals ["", !Select [1, !Split [",", !Join ["", [!Join [",", !Ref PrivateSubnetIds], ",,,"]]]]]]
  Have3PrivateSubnets:
    !Not [!Equals ["", !Select [2, !Split [",", !Join ["", [!Join [",", !Ref PrivateSubnetIds], ",,,"]]]]]]
  Have4PrivateSubnets:
    !Not [!Equals ["", !Select [3, !Split [",", !Join ["", [!Join [",", !Ref PrivateSubnetIds], ",,,"]]]]]]

Resources:

  MasterSslCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub ${DnsRecordName}.${DnsZoneName}
      SubjectAlternativeNames:
        - !Sub ${CertificateSanName}.${DnsZoneName}
      DomainValidationOptions:
        - DomainName: !Sub ${DnsRecordName}.${DnsZoneName}
          HostedZoneId: !Ref DnsZoneId
        - DomainName: !Sub ${CertificateSanName}.${DnsZoneName}
          HostedZoneId: !Ref DnsZoneId
      ValidationMethod: DNS

  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ELB to route traffic to Jenkins Master.
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Subnets: !Ref PublicSubnetIds
      SecurityGroups: [ !Ref AlbSecurityGroup ]

  MasterTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: HTTP
      Port: 8080
      HealthCheckPath: /login
      VpcId: !Ref VpcId
      TargetType: ip

  AlbHttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: !Ref MasterSslCertificate
      DefaultActions:
      - Type: fixed-response
        FixedResponseConfig:
          StatusCode: 403
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 443
      Protocol: HTTPS

  AlbHttpsListenerAdminRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 10
      ListenerArn: !Ref AlbHttpsListener
      Actions:
      - Type: forward
        ForwardConfig:
          TargetGroups:
          - TargetGroupArn: !Ref MasterTargetGroup
      Conditions:
      - Field: source-ip
        SourceIpConfig:
          Values: !Ref ClientCidrList

  AlbHttpsListenerWebhookRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 20
      ListenerArn: !Ref AlbHttpsListener
      Actions:
      - Type: forward
        ForwardConfig:
          TargetGroups:
          - TargetGroupArn: !Ref MasterTargetGroup
      Conditions:
      - Field: path-pattern
        PathPatternConfig:
          Values: [ /github-webhook/ ]

  MasterCname:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DnsZoneName}.
      Name: !Sub ${DnsRecordName}.${DnsZoneName}
      Comment: Jenkins Master
      Type: CNAME
      TTL: 300
      ResourceRecords:
        - !GetAtt AppLoadBalancer.DNSName

  MasterLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '${AWS::StackName}-JenkinsMaster'
      RetentionInDays: 30

  MasterEcsTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: '*'

  MasterEcsExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Allow ECS to store logs in logwach.
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
      - PolicyName: read-jenkins-secrets
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: !Ref SecretsJsonArn

  EcsCluster:
    Type: AWS::ECS::Cluster

  MasterEcsTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      ExecutionRoleArn: !GetAtt MasterEcsExecutionRole.Arn
      TaskRoleArn: !GetAtt MasterEcsTaskRole.Arn
      Volumes:
      - Name: jenkins-home
      - Name: run-secrets
      - Name: jenkins-jobs
        EFSVolumeConfiguration:
          FilesystemId: !Ref JobsFileSystem
          TransitEncryption: ENABLED
      ContainerDefinitions:

      - Name: permissions-sidecar
        Essential: false
        Image: public.ecr.aws/amazonlinux/amazonlinux:latest
        Command:
        - chown
        - -R
        - 1000:1000
        - /var/jenkins_home
        MountPoints:
        - ContainerPath: /var/jenkins_home
          SourceVolume: jenkins-home
        - ContainerPath: /var/jenkins_home/jobs
          SourceVolume: jenkins-jobs
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref MasterLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: permissions-sidecar

      - Name: secrets-sidecar
        Image: docker/ecs-secrets-sidecar:latest
        Command:
        - '[{"Name":"jenkins","Keys":["*"]}]'
        Essential: false
        MountPoints:
        - ContainerPath: /run/secrets
          SourceVolume: run-secrets
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref MasterLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: secrets-sidecar
        Secrets:
        - Name: jenkins
          ValueFrom: !Ref SecretsJsonArn

      - Name: plugins-sidecar
        Image: jenkins/jenkins:lts-jdk11
        EntryPoint:
        - /bin/sh
        - -c
        - !Sub "jenkins-plugin-cli -d /var/jenkins_home/plugins --verbose --plugins $(curl -s '${ConfigUri}/plugins')"
        DependsOn:
        - ContainerName: permissions-sidecar
          Condition: COMPLETE
        - ContainerName: secrets-sidecar
          Condition: COMPLETE
        Essential: false
        MountPoints:
        - ContainerPath: /var/jenkins_home
          SourceVolume: jenkins-home
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref MasterLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: plugins-sidecar

      - Name: jenkins-master
        Image: jenkins/jenkins:lts-jdk11
        DependsOn:
        - ContainerName: plugins-sidecar
          Condition: COMPLETE
        PortMappings:
        - ContainerPort: 8080
        Environment:
        - Name: JAVA_OPTS
          Value: -Djenkins.install.runSetupWizard=false
        - Name: CASC_JENKINS_CONFIG
          Value: !Sub ${ConfigUri}/jenkins.casc.yaml
        - Name: SECRETS
          Value: /run/secrets/jenkins
        MountPoints:
        - ContainerPath: /var/jenkins_home
          SourceVolume: jenkins-home
        - ContainerPath: /var/jenkins_home/jobs
          SourceVolume: jenkins-jobs
        - ContainerPath: /run/secrets
          ReadOnly: true
          SourceVolume: run-secrets
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref MasterLogGroup
            awslogs-region: !Ref AWS::Region
            awslogs-stream-prefix: jenkins-master

  MasterEcsService:
    Type: AWS::ECS::Service
    DependsOn: AlbHttpsListenerAdminRule
    Properties:
      Cluster: !Ref EcsCluster
      DesiredCount: 1
      TaskDefinition: !Ref MasterEcsTask
      HealthCheckGracePeriodSeconds: 300
      LaunchType: FARGATE
      EnableExecuteCommand: true
      LoadBalancers:
      - TargetGroupArn: !Ref MasterTargetGroup
        ContainerPort: 8080
        ContainerName: jenkins-master
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups: [ !Ref MasterSecurityGroup ]
          Subnets: !Ref PrivateSubnetIds

  MasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow the ALB to route traffic to Jenkins.
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        SourceSecurityGroupId: !Ref AlbSecurityGroup

  JobsSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Jenkins Master to mount Jenkins Home
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      # Receive NFS from Jenkins Instances
      - IpProtocol: tcp
        FromPort: 2049
        ToPort: 2049
        SourceSecurityGroupId: !Ref MasterSecurityGroup

  JobsFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      Encrypted: true
      BackupPolicy:
        Status: ENABLED
      FileSystemTags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-shared-filesystem

  JobsMountTarget0:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref JobsFileSystem
      SecurityGroups: [ !Ref JobsSecurityGroup ]
      SubnetId: !Select [ 0, !Ref PrivateSubnetIds ]

  JobsMountTarget1:
    Type: AWS::EFS::MountTarget
    Condition: Have2PrivateSubnets
    Properties:
      FileSystemId: !Ref JobsFileSystem
      SecurityGroups: [ !Ref JobsSecurityGroup ]
      SubnetId: !Select [ 1, !Ref PrivateSubnetIds ]

  JobsMountTarget2:
    Type: AWS::EFS::MountTarget
    Condition: Have3PrivateSubnets
    Properties:
      FileSystemId: !Ref JobsFileSystem
      SecurityGroups: [ !Ref JobsSecurityGroup ]
      SubnetId: !Select [ 2, !Ref PrivateSubnetIds ]

  JobsMountTarget3:
    Type: AWS::EFS::MountTarget
    Condition: Have4PrivateSubnets
    Properties:
      FileSystemId: !Ref JobsFileSystem
      SecurityGroups: [ !Ref JobsSecurityGroup ]
      SubnetId: !Select [ 3, !Ref PrivateSubnetIds ]

  AgentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow master to run tasks on agents.
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref MasterSecurityGroup

  # FIXME: Static agent for temporary use.  Fast and easy to get us going.
  # Replace with on-demand agents for a more cost-effective solution.
  # To make this work, you will need to:
  # 1) Generate an SSH key pair
  # 2) Launch this stack with the parameter JenkinsPubKey set to the public
  #    key.
  # 3) Create credentials in jenkins for the key pair and create the node
  #    definition as described in:
  #    https://www.jenkins.io/doc/book/using/using-agents/

  TempAgentInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        SetupCfnHup:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: '000400'
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.TempAgentInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource TempAgentInstance --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        SetupRepos:
          commands:
            AddVagrantRepo:
              command: yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
            EnableJavaRepo:
              command: amazon-linux-extras enable java-openjdk11
        InstallPackages:
          packages:
            yum:
              git: []
              java-11-openjdk: []
              vagrant: []
        InstallChefWorkstation:
          commands:
            InstallChefWorkstation:
              test: '! which chef'
              command: curl -L https://omnitruck.chef.io/install.sh | bash -s -- -P chef-workstation -v 22.2.807
        CreateJenkinsUser:
          commands:
            CreateJenkinsUser:
              test: '! id jenkins'
              command: useradd -m -r jenkins
        SetJenkinsSshKey:
          files:
            /home/jenkins/.ssh/authorized_keys:
              content: !Ref JenkinsPubKey
              owner: jenkins
              group: jenkins
              mode: '000400'
          commands:
            SshDirPermissions:
              command: install -o jenkins -g jenkins -m 0700 -d /home/jenkins/.ssh
        configSets:
          default:
          - SetupCfnHup
          - SetupRepos
          - InstallPackages
          - InstallChefWorkstation
          - CreateJenkinsUser
          - SetJenkinsSshKey
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
    Properties:
      # NOTE: CloudFormation may redeploy the agent instance if a new release
      # of the amazon linux ami was released since the last stack update.
      ImageId: '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2}}'
      InstanceType: 't3.small'
      NetworkInterfaces:
      - DeviceIndex: '0'
        GroupSet:
        - !Ref AgentSecurityGroup
        # This is temporary; just pin it to the first private subnet.
        SubnetId: !Select [ 0, !Ref PrivateSubnetIds ]
      KeyName: ice-key.2019-06-11
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource TempAgentInstance --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource TempAgentInstance --region ${AWS::Region}

  # FIXME: Temporarily allow SSH into agent to help troubleshoot configuration.
  TempAgentInstanceAccess:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AgentSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 10.0.0.0/8
